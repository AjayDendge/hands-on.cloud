version: 2.1

references:

base_image: &base_image
  cibuilds/hugo:latest

working_directory: &working_directory
  ~/project

default_hugo_config: &default_hugo_config
  docker:
    - image: *base_image
  working_directory: *working_directory

default_terraform_config: &default_terraform_config
  docker:
    - image: hashicorp/terraform:light
  working_directory: *working_directory

set_environment: &set_environment
  run:
    name: Set environment
    command: |
      cd && touch $BASH_ENV
      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        echo 'export ENVIRONMENT=default' >> $BASH_ENV
        echo 'export ENVIRONMENT_DOMAIN=hands-on.cloud' >> $BASH_ENV
      else
        echo 'export ENVIRONMENT=staging' >> $BASH_ENV
        ENVIRONMENT_ID="${CIRCLE_BRANCH//_/-}"
        echo "export ENVIRONMENT_ID=${ENVIRONMENT_ID}" >> $BASH_ENV
        ENVIRONMENT_DOMAIN="${ENVIRONMENT_ID}.hands-on.cloud"
        echo "export ENVIRONMENT_DOMAIN=${ENVIRONMENT_DOMAIN}" >> $BASH_ENV
      fi

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      . $BASH_ENV
      cd terraform/${ENVIRONMENT}
      terraform init

jobs:

  build:
    <<: *default_hugo_config
    steps:
      - checkout
      - *set_environment
      - run:
          name: Configure build
          command: |
            . $BASH_ENV
            cd hugo
            sed -r -i.bak "s/http:\/\/localhost/http:\/\/${ENVIRONMENT_DOMAIN}/g" config.toml
      - run:
          name: Build Hugo website
          command: |
            . $BASH_ENV
            echo "Running Hugo build..."
            cd hugo
            hugo -v -d public_test
            cp config.toml.bak config.toml
            sed -r -i.bak "s/http:\/\/localhost/https:\/\/hands-on.cloud/g" config.toml
            hugo -v -d public_prod
            echo "Adding ads.txt to support AdSense requirements..."
            echo "google.com, pub-2729052102059896, DIRECT, f08c47fec0942fa0" > public_test/ads.txt
            echo "google.com, pub-2729052102059896, DIRECT, f08c47fec0942fa0" > public_prod/ads.txt
      - *save_repo

  create_or_update_testing:
    <<: *default_terraform_config
    steps:
      - *restore_repo
      - *set_environment
      - *terraform_init
      - run:
          name: Creating Terraform TEST environment 
          command: |
            . $BASH_ENV
            cd terraform/${ENVIRONMENT}
            terraform workspace new ${ENVIRONMENT_ID} || terraform workspace select ${ENVIRONMENT_ID} || exit -1
            terraform plan -out=../terraform_testing.plan
            terraform apply --auto-approve ../terraform_testing.plan
      - persist_to_workspace:
          root: *working_directory
          paths:
            - terraform/terraform_testing.plan

  deploy_test_website:
    docker:
      - image: xueshanf/awscli
    steps:
      - *restore_repo
      - *set_environment
      - attach_workspace:
          at: *working_directory
      - deploy:
          name: Deploy Hugo website
          command: |
            . $BASH_ENV
            aws s3 sync hugo/public_test s3://${ENVIRONMENT_DOMAIN} --delete

  create_or_update_prod:
    <<: *default_terraform_config
    steps:
      - *restore_repo
      - *set_environment
      - run:
          name: Updating Terraform PROD environment
          command: |
            . $BASH_ENV
            cd terraform/default
            terraform init
            terraform workspace select default
            terraform plan -out=../terraform_prod.plan
#            terraform apply --auto-approve ../terraform_prod.plan
      - persist_to_workspace:
          root: *working_directory
          paths:
            - terraform/terraform_prod.plan

  deploy_prod_website:
    docker:
      - image: xueshanf/awscli
    steps:
      - *restore_repo
      - *set_environment
      - attach_workspace:
          at: *working_directory
      - deploy:
          name: Deploy Hugo website
          command: |
            . $BASH_ENV
            aws s3 sync hugo/public_prod s3://origin.hands-on.cloud --delete
            aws cloudfront create-invalidation --distribution-id=E2K9OZ801QFKCC --paths /

  run_ui_tests:
    docker:
      - image: cypress/base:10
    working_directory: *working_directory
    steps:
      - *restore_repo
      - *set_environment
      - attach_workspace:
          at: *working_directory
      - run:
          name: Install Cypress
          command: |
            npm install
      - run:
          name: Run Cypress tests
          command: |
            source $BASH_ENV
            export CYPRESS_BASE_URL="http://${ENVIRONMENT_DOMAIN}"
            $(npm bin)/cypress run #--record --key ${ENVIRONMENT_ID}
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots
      - *save_repo

  destroy_testing:
    <<: *default_terraform_config
    steps:
      - *restore_repo
      - *set_environment
      - *terraform_init
      - attach_workspace:
          at: *working_directory
      - run:
          name: Deleting Terraform environment
          command: |
            . $BASH_ENV
            cd terraform/${ENVIRONMENT}
            terraform workspace select ${ENVIRONMENT_ID}
            terraform destroy --auto-approve
            terraform workspace select default
            terraform workspace delete ${ENVIRONMENT_ID}

workflows:
  version: 2
  build-test-and-approval-deploy:
    jobs:
      - build
      - create_or_update_testing:
          requires:
            - build
          filters:
            branches:
              ignore:
                - master
      - deploy_test_website:
          requires:
            - create_or_update_testing
          filters:
            branches:
              ignore:
                - master
      - run_ui_tests:
          requires:
            - deploy_test_website
          filters:
            branches:
              ignore:
                - master
      - destroy_testing:
          requires:
            - run_ui_tests
          filters:
            branches:
              ignore:
                - master
      - create_or_update_prod:
          requires:
            - build
          filters:
            branches:
              only: master
# TODO: add master branch filter 
      - deploy_prod_website:
          requires:
            - create_or_update_prod
          filters:
            branches:
              only: master
